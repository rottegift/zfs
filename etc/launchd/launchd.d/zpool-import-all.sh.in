#!/bin/bash

echo "+zpool-import-all.sh"
date
export ZPOOL=@sbindir@/zpool
export ZFS=@sbindir@/zfs
export ZPOOL_IMPORT_ALL_COOKIE=/var/run/org.openzfsonosx.zpool-import-all.didRun
export INVARIANT_DISKS_IDLE_FILE=/var/run/disk/invariant.idle
export TIMEOUT_SECONDS=60
export MAXIMUM_SLEEP_ITERATIONS=$((${TIMEOUT_SECONDS} * 10))

/usr/bin/time /usr/sbin/system_profiler SPParallelATADataType SPCardReaderDataType SPFibreChannelDataType SPFireWireDataType SPHardwareRAIDDataType SPNetworkDataType SPPCIDataType SPParallelSCSIDataType SPSASDataType SPSerialATADataType SPStorageDataType SPThunderboltDataType SPUSBDataType SPNetworkVolumeDataType 1>/dev/null
/bin/sync


echo "Waiting up to ${TIMEOUT_SECONDS} seconds for the InvariantDisks idle file ${INVARIANT_DISKS_IDLE_FILE} to exist"

i=0
while [ "${i}" -lt "${MAXIMUM_SLEEP_ITERATIONS}" -a ! -e "${INVARIANT_DISKS_IDLE_FILE}" ]
do
	i=$((i+1))
	sleep .1
done

if [ -e "${INVARIANT_DISKS_IDLE_FILE}" ]
then
	echo "Found ${INVARIANT_DISKS_IDLE_FILE} after ${i} iterations of sleeping 0.1 seconds"
else
	echo "File ${INVARIANT_DISKS_IDLE_FILE} not found within ${TIMEOUT_SECONDS} seconds"
fi
date

# try caches first

ZPOOL_CACHE_DONE=0
if [ -f /etc/zfs/zpool.cache ]
then
    # but this isn't a superb idea because import order is all over the map
    # and importing ssdpool last is [a] system-slowing and [b] leaves empty directories mounted
    #echo "Running zpool import -c /etc/zfs/zpool.cache -a"
    #"${ZPOOL}" import -c /etc/zfs/zpool.cache -a && ZPOOL_CACHE_DONE=1
    echo "zpool.cache file found!"
fi

if ((!ZPOOL_CACHE_DONE))
then
    SSDPOOL_CACHE_DONE=0
    TRINITY_CACHE_DONE=0
    SAFETY_CACHE_DONE=0
    DUAL_CACHE_DONE=0
    HOMEPOOL_CACHE_DONE=0
    echo "ZPOOL_CACHE_DONE = 0, therefore trying individual caches"
    if [ -f /etc/zfs/caches/ssdpool.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/ssdpool.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "ssdpool cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/ssdpool.cache -a && SSDPOOL_CACHE_DONE=1
	if ((!SSDPOOL_CACHE_DONE))
	then
	    echo "ssdpool cache import failed, this is critical. bye."
	    exit 1
	fi
    fi
    if [ -f /etc/zfs/caches/Trinity.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/Trinity.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "Trinity cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/Trinity.cache -a  && TRINITY_CACHE_DONE=1
    fi
    if [ -f /etc/zfs/caches/Safety.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/Safety.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "Safety cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/Safety.cache -a && SAFETY_CACHE_DONE=1
    fi
    if [ -f /etc/zfs/caches/Quarto.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/Quarto.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "Quarto cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/Quarto.cache -a && QUARTO_CACHE_DONE=1
    fi
    if [ -f /etc/zfs/caches/homepool.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/homepool.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "homepool cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/homepool.cache -a && HOMEPOOL_CACHE_DONE=1
	if ((!HOMEPOOL_CACHE_DONE))
	then
	    echo "homepool cache import failed, this is critical. bye."
	    exit 1
	fi
    fi
    if [ -f /etc/zfs/caches/Dual.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/Dual.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "Dual cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/Dual.cache -a && DUAL_CACHE_DONE=1
    fi
    if [ -f /etc/zfs/caches/Newmis.cache ]
    then
	"${ZPOOL}" import -c /etc/zfs/caches/Newmis.cache | \
	    egrep -i 'cannot|faulted|damaged|corrupted|missing|cannot.(discover|import)|no.pools.avail' && \
	    (echo "Newmis cache import cannot proceed. aborting."; exit 1) || exit $?
	"${ZPOOL}" import -c /etc/zfs/caches/Newmis.cache -a  && NEWMIS_CACHE_DONE=1
    fi
fi

if((ZPOOL_CACHE_DONE)); then echo Everything imported via cache.; fi
if((SSDPOOL_CACHE_DONE)); then echo ssdpool imported via cache.; fi
if((TRINITY_CACHE_DONE)); then echo Trinity imported via cache.; fi
if((SAFETY_CACHE_DONE)); then echo Safety imported via cache.; fi
if((QUARTO_CACHE_DONE)); then echo Quarto imported via cache.; fi
if((HOMEPOOL_CACHE_DONE)); then echo homepool imported via cache.; fi
if((DUAL_CACHE_DONE)); then echo Dual imported via cache.; fi
if((NEWMIS_CACHE_DONE)); then echo Newmis imported via cache.; fi

if ((!ZPOOL_IMPORT_CACHE && ((! ((SSDPOOL_CACHE_DONE || SAFETY_CACHE_DONE || QUARTO_CACHE_DONE || TRINITY_CACHE_DONE || HOMEPOOL_CACHE_DONE || DUAL_CACHE_DONE || NEWMIS_CACHE_DONE))))))
then
    echo "Nothing imported via caches.  Running zpool import -d /etc/zfs/devices"
    "${ZPOOL}" import -d /etc/zfs/devices
    date

    # should also make this work on mis; for now fallback will have to be manual
    echo "Running zpool import -d /etc/zfs/devices ssdpool || exit 1"
    "${ZPOOL}" import -d /etc/zfs/devices ssdpool || exit 1
    date

    echo "Running zfs mount -a || exit 1"
    "${ZFS}" mount -a  || exit 1
    date

    echo "Running zpool import -d /etc/zfs/devices Trinity || exit 1"
    "${ZPOOL}" import -d /etc/zfs/devices Trinity || exit 1
    date

    echo "Running zpool import -d /etc/zfs/devices -a"
    date

    "${ZPOOL}" import -d /etc/zfs/devices -a
    ret=$?

    date
    echo "Finished running zpool import -a : ${ret}"
fi

echo "Touching the file ${ZPOOL_IMPORT_ALL_COOKIE}"
touch "${ZPOOL_IMPORT_ALL_COOKIE}"

echo "Setting cachefile properties"
for i in ssdpool Safety Trinity Quarto homepool Dual Newmis 
do
    "${ZPOOL}" set cachefile=/etc/zfs/caches/$i.cache $i
done

date
echo "-zpool-import-all.sh"

exit 0
